openapi: '3.0.2'

info:
  title: rezept-db backend API
  version: '1.0'

servers:
  - url: http://localhost:9000/api
    description: |
      Local development server.
  - url: http://aragorn.shire.grandrath-net.de/api
    description: |
      Production server.

paths:
  /health:
    get:
      description: |
        Reports system health.
      operationId: health.show
      responses:
        '200':
          description: |
            The system is up and running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

  /recipes:
    get:
      description: |
        Get a list of recipes.
      operationId: recipes.index
      parameters:
        - in: query
          name: name
          schema:
            type: string
            example: pizza
          required: false
          allowEmptyValue: true
          description: |
            If present only recipes that contain the given string in their
            `name` will be returned.
      responses:
        '200':
          description: |
            OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                required:
                  - recipes

    post:
      description: |
        Create a new recipe entry.
      operationId: recipes.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeInput'
      responses:
        '201':
          description: |
            The recipe has been created.
          headers:
            Location:
              description: |
                The recipe's URL.
              schema:
                type: string
                format: uri
                example: https://example.com/recipes/recipe-123

  /recipes/{recipeId}:
    parameters:
      - in: path
        name: recipeId
        schema:
          $ref: '#/components/schemas/RecipeId'
        required: true
    get:
      description: |
        Get a recipe by its id.
      operationId: recipes.show
      responses:
        '200':
          description: |
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          $ref: '#/components/responses/RecipeNotFound'

    put:
      description: |
        Update a recipe. Missing optional values will be set to `null`.
      operationId: recipes.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeInput'
      responses:
        '204':
          description: |
            The update has been applied.
        '404':
          $ref: '#/components/responses/RecipeNotFound'

components:
  responses:
    RecipeNotFound:
      description: |
        The given `recipeId` does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    RecipeInput:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/RecipeName'
        notes:
          $ref: '#/components/schemas/RecipeNotes'
      required:
        - name

    Recipe:
      type: object
      additionalProperties: false
      properties:
        recipeId:
          $ref: '#/components/schemas/RecipeId'
        name:
          $ref: '#/components/schemas/RecipeName'
        notes:
          $ref: '#/components/schemas/RecipeNotes'
      required:
        - recipeId
        - name

    RecipeId:
      type: string
      description: |
        The recipe's unique id.
      example: 257066a2-a1d7-4bed-a4f8-97b54bc88efb

    RecipeName:
      type: string
      minLength: 1
      description: |
        Descriptive name.
      example: Grilled cheese

    RecipeNotes:
      type: string
      nullable: true
      description: |
        Arbitrary notes.
      example: American cheese melts best

    SystemStatus:
      type: object
      properties:
        status:
          type: string
          description: |
            "OK" if system is healthy, an error message otherwise.
          example: OK
      required:
        - status

    Error:
      type: object
      properties:
        message:
          type: string
          description: |
            A (hopefully) helpful error message.
          example: Something went wrong
