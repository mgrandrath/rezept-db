openapi: '3.0.2'

info:
  title: rezept-db backend API
  version: '1.0'

servers:
  - url: http://localhost:9000/api
    description: |
      Local development server.
  - url: http://aragorn.shire.grandrath-net.de/api
    description: |
      Production server.

tags:
  - name: Recipes
  - name: System

paths:
  /health:
    get:
      summary: Reports system health
      tags:
        - System
      operationId: health.show
      responses:
        '200':
          description: |
            The system is up and running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

  /recipes:
    get:
      summary: Get a list of recipes
      tags:
        - Recipes
      operationId: recipes.index
      parameters:
        - in: query
          name: name
          schema:
            type: string
            example: pizza
          required: false
          description: |
            If present only recipes that contain the given string in their
            `name` will be returned.
        - in: query
          name: maxDiet
          schema:
            $ref: '#/components/schemas/Diet'
          required: false
          description: |
            If present only recipes that conform to the given diet will be
            returned. E.g. `VEGETARIAN` will return vegetarian as well as vegan
            recipes.
        - in: query
          name: maxPrepTime
          schema:
            $ref: '#/components/schemas/PrepTime'
          required: false
          description: |
            If present only recipes that have a preperation time shorter than
            the given value (in minutes) will be returned.
      responses:
        '200':
          description: |
            OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
                required:
                  - recipes

    post:
      summary: Create a new recipe entry
      tags:
        - Recipes
      operationId: recipes.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeInput'
      responses:
        '201':
          description: |
            The recipe has been created.
          headers:
            Location:
              description: |
                The recipe's URL.
              schema:
                type: string
                format: uri
                example: https://example.com/recipes/recipe-123

  /recipes/{recipeId}:
    parameters:
      - in: path
        name: recipeId
        schema:
          $ref: '#/components/schemas/RecipeId'
        required: true

    get:
      summary: Get a recipe by its id
      tags:
        - Recipes
      operationId: recipes.show
      responses:
        '200':
          description: |
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          $ref: '#/components/responses/RecipeNotFound'

    put:
      summary: Update a recipe
      description: |
        Missing optional values will be set to `null`.
      tags:
        - Recipes
      operationId: recipes.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeInput'
      responses:
        '204':
          description: |
            The update has been applied.
        '404':
          $ref: '#/components/responses/RecipeNotFound'

components:
  responses:
    RecipeNotFound:
      description: |
        The given `recipeId` does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    RecipeInput:
      description: |
        Input parameters for adding / updating a recipe.
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/RecipeName'
        source:
          $ref: '#/components/schemas/RecipeSource'
        diet:
          $ref: '#/components/schemas/Diet'
        prepTime:
          $ref: '#/components/schemas/PrepTime'
        notes:
          $ref: '#/components/schemas/RecipeNotes'
        tags:
          $ref: '#/components/schemas/Tags'
      required:
        - name
        - source
        - diet
        - prepTime

    Recipe:
      description: |
        A recipe.
      type: object
      additionalProperties: false
      properties:
        recipeId:
          $ref: '#/components/schemas/RecipeId'
        name:
          $ref: '#/components/schemas/RecipeName'
        source:
          $ref: '#/components/schemas/RecipeSource'
        diet:
          $ref: '#/components/schemas/Diet'
        prepTime:
          $ref: '#/components/schemas/PrepTime'
        notes:
          $ref: '#/components/schemas/RecipeNotes'
        tags:
          $ref: '#/components/schemas/Tags'
      required:
        - recipeId
        - name
        - source
        - diet
        - prepTime

    RecipeId:
      description: |
        The recipe's unique id.
      type: string
      example: 257066a2-a1d7-4bed-a4f8-97b54bc88efb

    RecipeName:
      description: |
        Descriptive name.
      type: string
      minLength: 1
      example: Grilled cheese

    RecipeSource:
      description: |
        The source where the actual recipe instructions can be looked up.
      oneOf:
        - $ref: '#/components/schemas/OnlineSource'
        - $ref: '#/components/schemas/OfflineSource'
      discriminator:
        propertyName: type
        mapping:
          ONLINE: '#/components/schemas/OnlineSource'
          OFFLINE: '#/components/schemas/OfflineSource'

    OnlineSource:
      description: |
        A reference to an online source (aka URL).
      type: object
      properties:
        type:
          type: string
          enum:
            - ONLINE
        url:
          description: |
            The URL where the recipe instructions can be found.
          type: string
          format: url
          example: https://www.youtube.com/watch?v=dQw4w9WgXcQ
      required:
        - type
        - url

    OfflineSource:
      description: |
        A reference to an offline source (book or other recipe collection).
      type: object
      properties:
        type:
          type: string
          enum:
            - OFFLINE
        title:
          description: |
            The title of the book or collection.
          type: string
          example: Great American Burger Book
        page:
          description: |
            The page within the book where the recipe instructions can be found.
          type: integer
          example: 42
      required:
        - type
        - title
        - page

    Diet:
      description: |
        The (minimal) diet a recipe is compatible with.
      type: string
      enum:
        - VEGAN
        - VEGETARIAN
        - OMNIVORE
      example: VEGETARIAN

    PrepTime:
      description: |
        Rough range of required preperation time.
      type: string
      enum:
        - UNDER_30_MINUTES
        - 30_TO_60_MINUTES
        - 60_TO_120_MINUTES
        - OVER_120_MINUTES
      example: 30_TO_60_MINUTES

    RecipeNotes:
      description: |
        Arbitrary notes.
      type: string
      nullable: true
      example: American cheese melts best

    Tags:
      description: |
        A list of tags.
      type: array
      items:
        type: string
        minLength: 1
      uniqueItems: true
      example: ['Indian', 'Potato', 'Curry']

    SystemStatus:
      type: object
      properties:
        status:
          description: |
            "OK" if system is healthy, an error message otherwise.
          type: string
          example: OK
      required:
        - status

    Error:
      type: object
      properties:
        message:
          description: |
            A (hopefully) helpful error message.
          type: string
          example: Something went wrong
